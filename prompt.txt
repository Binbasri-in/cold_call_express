## users/urls.py

from django.urls import path
from .views import (
    SignUpView, CustomLoginView, CustomLogoutView,
    ProfileUpdateView
)
urlpatterns = [
    path('signup/', SignUpView.as_view(), name='signup'),
    path('login/', CustomLoginView.as_view(), name='login'),
    path('logout/', CustomLogoutView.as_view(), name='logout'),
    path('profile/', ProfileUpdateView.as_view(), name='profile'),
]

## users/views.py

from django.urls import reverse_lazy
from django.views.generic.edit import CreateView, UpdateView
from django.contrib.auth.views import LoginView, LogoutView
from .forms import CustomUserCreationForm
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from .models import UserProfile
from .forms import UserProfileForm

class SignUpView(CreateView):
    form_class = CustomUserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'users/signup.html'

class CustomLoginView(LoginView):
    template_name = 'users/login.html'

class CustomLogoutView(LogoutView):
    template_name = 'users/logout.html'

class ProfileUpdateView(LoginRequiredMixin, UpdateView):
    model = UserProfile
    form_class = UserProfileForm
    template_name = 'users/profile_update.html'
    success_url = reverse_lazy('profile')

    def get_object(self, queryset=None):
        return self.request.user.profile

## users/models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.db.models.signals import post_save
from django.dispatch import receiver


class CustomUser(AbstractUser):
    # Add custom fields here
    phone_number = models.CharField(max_length=15, blank=True)
    company_name = models.CharField(max_length=100, blank=True)
    

class UserProfile(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='profile')
    bio = models.TextField(max_length=500, blank=True)
    preferred_language = models.CharField(max_length=10, default='en')
    notification_preferences = models.JSONField(default=dict)


@receiver(post_save, sender=CustomUser)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)


@receiver(post_save, sender=CustomUser)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()

## templates/base.html

{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Cold-Call Express{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'styles.css' %}">  <!-- Correct path depending on your STATICFILES_DIRS -->

    <style>
        body {
            padding-top: 60px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="{% url 'home' %}">Cold-Call Express</a>
            <div class="navbar-nav">
                {% if user.is_authenticated %}
                    <a class="nav-item nav-link" href="{% url 'campaign_dashboard' %}">Dashboard</a>
                    <a class="nav-item nav-link" href="{% url 'campaign_list' %}">Campaigns</a>
                    <a class="nav-item nav-link" href="{% url 'logout' %}">Logout</a>
                {% else %}
                    <a class="nav-item nav-link" href="{% url 'login' %}">Login</a>
                    <a class="nav-item nav-link" href="{% url 'signup' %}">Sign Up</a>
                {% endif %}
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        {% block content %}
        {% endblock %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

## templates/home.html

{% extends 'base.html' %}

{% block content %}
<h1>Welcome to Cold-Call Express</h1>
<p>Revolutionize your cold calling strategy with AI-powered assistance.</p>
{% if user.is_authenticated %}
    <a href="{% url 'campaign_list' %}" class="btn btn-primary">View Campaigns</a>
{% else %}
    <a href="{% url 'signup' %}" class="btn btn-primary">Get Started</a>
{% endif %}
{% endblock %}


## templates/campaign_form.html

{% extends 'base.html' %}

{% block content %}
<h2>{% if form.instance.pk %}Edit{% else %}Create{% endif %} Campaign</h2>
<form method="post">
    {% csrf_token %}
    {% for field in form %}
        <div class="mb-3">
            <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
            {{ field }}
            {% if field.help_text %}
                <small class="form-text text-muted">{{ field.help_text }}</small>
            {% endif %}
            {% for error in field.errors %}
                <div class="alert alert-danger">{{ error }}</div>
            {% endfor %}
        </div>
    {% endfor %}
    <button type="submit" class="btn btn-primary">Save Campaign</button>
</form>
{% endblock %}

## campaigns/forms.py

from django import forms
from .models import Campaign

class CampaignForm(forms.ModelForm):
    class Meta:
        model = Campaign
        fields = ['name', 'company_details', 'product_service', 'marketing_keywords']

## campaigns/views.py

from django.views.generic import ListView, CreateView, UpdateView, DeleteView, TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from django.db.models import Sum, Avg
from .models import Campaign
from .forms import CampaignForm

class CampaignListView(LoginRequiredMixin, ListView):
    model = Campaign
    template_name = 'campaigns/campaign_list.html'
    context_object_name = 'campaigns'

    def get_queryset(self):
        return Campaign.objects.filter(user=self.request.user)

class CampaignCreateView(LoginRequiredMixin, CreateView):
    model = Campaign
    form_class = CampaignForm
    template_name = 'campaigns/campaign_form.html'
    success_url = reverse_lazy('campaign_list')

    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)
    
class CampaignUpdateView(LoginRequiredMixin, UpdateView):
    model = Campaign
    form_class = CampaignForm
    template_name = 'campaigns/campaign_form.html'
    success_url = reverse_lazy('campaign_list')

class CampaignDeleteView(LoginRequiredMixin, DeleteView):
    model = Campaign
    template_name = 'campaigns/campaign_confirm_delete.html'
    success_url = reverse_lazy('campaign_list')


class CampaignDashboardView(LoginRequiredMixin, TemplateView):
    template_name = 'campaigns/dashboard.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user_campaigns = Campaign.objects.filter(user=self.request.user)
        context['total_campaigns'] = user_campaigns.count()
        context['total_interactions'] = user_campaigns.aggregate(Sum('chatbot_interactions'))['chatbot_interactions__sum'] or 0
        context['average_conversion_rate'] = user_campaigns.aggregate(Avg('conversion_rate'))['conversion_rate__avg'] or 0
        context['average_interaction_duration'] = user_campaigns.aggregate(Avg('average_interaction_duration'))['average_interaction_duration__avg']
        context['recent_campaigns'] = user_campaigns.order_by('-created_at')[:5]
        return context

## campaigns/urls.py

from django.urls import path
from .views import (
    CampaignListView, CampaignCreateView, CampaignUpdateView, 
    CampaignDeleteView,CampaignDashboardView               
)

urlpatterns = [
    path('', CampaignListView.as_view(), name='campaign_list'),
    path('create/', CampaignCreateView.as_view(), name='campaign_create'),
    path('<int:pk>/update/', CampaignUpdateView.as_view(), name='campaign_update'),
    path('<int:pk>/delete/', CampaignDeleteView.as_view(), name='campaign_delete'),
    path('dashboard/', CampaignDashboardView.as_view(), name='campaign_dashboard'),

]

## campaigns/models.py

from django.db import models
from django.conf import settings


class Campaign(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    company_details = models.TextField()
    product_service = models.TextField()
    marketing_keywords = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    chatbot_interactions = models.IntegerField(default=0)
    conversion_rate = models.FloatField(default=0.0)
    average_interaction_duration = models.DurationField(null=True, blank=True)

    def __str__(self):
        return self.name